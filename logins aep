#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100
#define KEY 0xAA 

typedef struct {
    char username[50];
    char password[50];
    char role[10];
} User;

void encryptDecrypt(char *data) {
    while (*data) {
        *data ^= KEY;
        data++;
    }
}

void saveUser(User user) {
    FILE *file = fopen("users.txt", "a");
    if (file == NULL) {
        perror("Erro ao abrir o arquivo para salvar!");
        return;
    }
    encryptDecrypt(user.username);
    encryptDecrypt(user.password);
    encryptDecrypt(user.role);
    fprintf(file, "%s %s %s\n", user.username, user.password, user.role);
    fclose(file);
    encryptDecrypt(user.username);
    encryptDecrypt(user.password);
    encryptDecrypt(user.role);
}

int loadUsers(User users[], int *count) {
    FILE *file = fopen("users.txt", "r");

    if (file == NULL) {
        file = fopen("users.txt", "w");  
        if (file == NULL) {
            perror("Erro ao criar o arquivo!");
            return 0;
        }
        fclose(file);
        file = fopen("users.txt", "r");
        if (file == NULL) {
            perror("Erro ao abrir o arquivo ap√≥s criar!");
            return 0;
        }
    }

    *count = 0;
    while (fscanf(file, "%s %s %s", users[*count].username, users[*count].password, users[*count].role) != EOF) {
        encryptDecrypt(users[*count].username);
        encryptDecrypt(users[*count].password);
        encryptDecrypt(users[*count].role);
        (*count)++;
    }
    fclose(file);
    return 1;
}

int authenticate(char *username, char *password, char *role) {
    User users[MAX];
    int count;
    if (!loadUsers(users, &count)) return 0;

    for (int i = 0; i < count; i++) {
        if (strcmp(users[i].username, username) == 0 && strcmp(users[i].password, password) == 0) {
            strcpy(role, users[i].role);
            return 1;
        }
    }
    return 0;
}

void addUser() {
    User user;
    int count;
    User users[MAX];
    loadUsers(users, &count);

    printf("Digite o nome de usuario: ");
    scanf("%s", user.username);
    printf("Digite a senha: ");
    scanf("%s", user.password);

    if (count == 0) {
        strcpy(user.role, "admin");
        printf("Primeiro usuario cadastrado como administrador.\n");
    } else {
        strcpy(user.role, "user");
    }

    saveUser(user);
    printf("Usuario cadastrado com sucesso!\n");
}

void listUsers() {
    User users[MAX];
    int count;
    if (!loadUsers(users, &count)) return;

    printf("Lista de usuarios:\n");
    for (int i = 0; i < count; i++) {
        printf("Usuario: %s | Perfil: %s\n", users[i].username, users[i].role);
    }
}

void deleteUser() {
    char username[50];
    User users[MAX];
    int count;

    if (!loadUsers(users, &count)) return;

    printf("Digite o nome de usuario para excluir: ");
    scanf("%s", username);

    FILE *file = fopen("users.txt", "w");
    if (file == NULL) {
        perror("Erro ao abrir o arquivo para excluir!");
        return;
    }

    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(users[i].username, username) != 0) {
            encryptDecrypt(users[i].username);
            encryptDecrypt(users[i].password);
            encryptDecrypt(users[i].role);
            fprintf(file, "%s %s %s\n", users[i].username, users[i].password, users[i].role);
            encryptDecrypt(users[i].username);
            encryptDecrypt(users[i].password);
            encryptDecrypt(users[i].role);
        } else {
            found = 1;
        }
    }
    fclose(file);

    if (found) {
        printf("Usuario excluido com sucesso!\n");
    } else {
        printf("Usuario nao encontrado.\n");
    }
}

void showPassword() {
    char username[50];
    User users[MAX];
    int count;

    if (!loadUsers(users, &count)) return;

    printf("Digite o nome de usuario para visualizar a senha: ");
    scanf("%s", username);

    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(users[i].username, username) == 0) {
            found = 1;
            printf("Senha para o usuario %s: %s\n", username, users[i].password);
            break;
        }
    }

    if (!found) {
        printf("Usuario nao encontrado.\n");
    }
}

void adminMenu() {
    int choice;
    do {
        printf("\n1. Adicionar usuario\n2. Listar usuarios\n3. Excluir usuario\n4. Mostrar senha\n5. Sair\n6. Encerrar Programa\nEscolha uma opcao: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addUser();
                break;
            case 2:
                listUsers();
                break;
            case 3:
                deleteUser();
                break;
            case 4:
                showPassword();
                break;
            case 5:
                printf("Saindo do menu de administrador...\n");
                return;  
            case 6:
                printf("Encerrando o programa...\n");
                exit(0);  
            default:
                printf("Opcao invalida!\n");
        }
    } while (choice != 6);
}

void userMenu() {
    int choice;
    do {
        printf("\n1. Listar usuarios\n2. Sair\n3. Encerrar Programa\nEscolha uma opcao: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                listUsers();
                break;
            case 2:
                printf("Saindo do menu de usuario...\n");
                return;  
            case 3:
                printf("Encerrando o programa...\n");
                exit(0);  
            default:
                printf("Opcao invalida!\n");
        }
    } while (choice != 3);
}

void loginScreen() {
    char username[50], password[50], role[10];
    int count;
    User users[MAX];

    if (!loadUsers(users, &count) || count == 0) {
        printf("Nenhum usuario encontrado. Por favor, cadastre o primeiro usuario.\n");
        addUser();
        return;
    }

    while (1) {
        printf("\nDigite seu nome de usuario: ");
        scanf("%s", username);
        printf("Digite sua senha: ");
        scanf("%s", password);

        if (authenticate(username, password, role)) {
            printf("Login bem-sucedido! Bem-vindo, %s.\n", username);
            if (strcmp(role, "admin") == 0) {
                adminMenu();
            } else {
                userMenu();
            }
            break;  
        } else {
            printf("Falha no login! Usuario ou senha incorretos.\n");
        }
    }
}

int main() {
    printf("Bem-vindo ao sistema de login!\n");
    loginScreen();  
    return 0;  
}
